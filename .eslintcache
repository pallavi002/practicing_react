[{"F:\\projects\\learning\\my-app\\src\\index.js":"1","F:\\projects\\learning\\my-app\\src\\reportWebVitals.js":"2","F:\\projects\\learning\\my-app\\src\\App.js":"3","F:\\projects\\learning\\my-app\\src\\Career\\Career.js":"4","F:\\projects\\learning\\my-app\\src\\Hobby\\hobby.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":2762,"mtime":1611854405235,"results":"9","hashOfConfig":"7"},{"size":834,"mtime":1611909330241,"results":"10","hashOfConfig":"7"},{"size":318,"mtime":1611167020795,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1bhn98f",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"F:\\projects\\learning\\my-app\\src\\index.js",[],["26","27"],"F:\\projects\\learning\\my-app\\src\\reportWebVitals.js",[],"F:\\projects\\learning\\my-app\\src\\App.js",["28"],"import React, { Component } from 'react';\r\nimport Styling from './App.css';\r\nimport Career from './Career/Career';\r\nimport Hobby from './Hobby/hobby';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    careers: [\r\n      { id: \"key01\", course: \"coding\" },\r\n      { id: \"key02\", course: \"finance\" },\r\n      { id: \"key03\", course: \"Dance\" }\r\n    ],\r\n    luck: \"wish good luck?\",\r\n    hobby: [\r\n      { name: \"gaming\" },\r\n      { name: \"singing\" }\r\n    ],\r\n    showCourses: false\r\n  }\r\n  //not using currently\r\n  // switchCareerHandler = (newCourse) => {\r\n  //   this.setState({\r\n  //     careers: [\r\n  //       { id: \"key01\", course: newCourse },\r\n  //       { id: \"key02\", course: \"Human Resources\" },\r\n  //       { id: \"key03\", course: \"Designer\" }\r\n  //     ]\r\n  //   })\r\n  // }\r\n  printGoodLuck = () => {\r\n    this.setState({\r\n      luck: \"Hey good luck !!\"\r\n    })\r\n  }\r\n  careerChangedHandler = (event, id) => {\r\n    const changeId = this.state.careers.findIndex(c => {\r\n      return c.id === id;\r\n    });\r\n    const career = { ...this.state.careers[changeId] };\r\n    career.course = event.target.value;\r\n    const careers = [...this.state.careers];\r\n    careers[changeId] = career;\r\n    this.setState({ careers: careers })\r\n\r\n  }\r\n\r\n  toggleCourseHandler = () => {\r\n    const doesShow = this.state.showCourses;\r\n    this.setState({ showCourses: !doesShow });\r\n  }\r\n  deleteCareerHandler = (careerIndex) => {\r\n    const careers = this.state.careers.slice();   //copying array instead of just pointing og\r\n    //you cane also do the below ES6 spread operator approach to copy array\r\n    //const careers = [...this.state.careers]\r\n    careers.splice(careerIndex, 1);\r\n    this.setState({ careers: careers })\r\n  }\r\n  render() {\r\n    let buttonClass = [];\r\n    let courses = null;\r\n    //dynamic styling\r\n    // let classes = [\"purple\", \"bold\"].join(\" \");\r\n    const classes = [];\r\n    if (this.state.careers.length <= 2) {\r\n      classes.push(Styling.red)\r\n    }\r\n    if (this.state.careers.length > 2) {\r\n      classes.push(Styling.purple)\r\n    }\r\n    if (this.state.showCourses) {\r\n      courses = (\r\n        <div>\r\n          {this.state.careers.map((career, index) => {\r\n            return <Career course={career.course} click={() => this.deleteCareerHandler(index)} key={career.id} careerChanged={(event) => this.careerChangedHandler(event, career.id)} />\r\n          })}\r\n        </div>\r\n      );\r\n      buttonClass.push(Styling.Red);\r\n    }\r\n    return (\r\n      <div className={Styling.App}>\r\n        <h1 className={classes.join(\" \")}>Hi..Start working on your Career.</h1>\r\n          <button className={buttonClass.join(\" \")} onClick={this.toggleCourseHandler} >TOGGLE CAREER</button>\r\n        {courses}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","F:\\projects\\learning\\my-app\\src\\Career\\Career.js",["29"],"import React from 'react';\r\nimport styles from './Career.css';      //using css modules\r\n// import Radium from 'radium';\r\n// import styled from 'styled-components';\r\n\r\nconst career = (props) => {\r\n    const style = {\r\n        \"@media (max-width: 500px)\": {\r\n            width: \"80%\"\r\n        }\r\n    }\r\n    return (\r\n        // <div className=\"Course\" style={style}>\r\n        <div className={styles.Course}>\r\n            <p onClick={props.click} className={styles.Headline}>Start working on your career with {props.course} before it's too late</p>\r\n            <p>{props.children}</p>\r\n            <p onClick={props.clickGoodLuck}>{props.luck}</p><br></br>\r\n            Suggest Career: <input type=\"text\" onChange={props.careerChanged}></input>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n// export default Radium(career);\r\nexport default career;\r\n","F:\\projects\\learning\\my-app\\src\\Hobby\\hobby.js",[],["30","31"],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":4,"column":8,"nodeType":"38","messageId":"39","endLine":4,"endColumn":13},{"ruleId":"36","severity":1,"message":"40","line":7,"column":11,"nodeType":"38","messageId":"39","endLine":7,"endColumn":16},{"ruleId":"32","replacedBy":"41"},{"ruleId":"34","replacedBy":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'Hobby' is defined but never used.","Identifier","unusedVar","'style' is assigned a value but never used.",["43"],["44"],"no-global-assign","no-unsafe-negation"]